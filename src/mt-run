#!/bin/bash

### Minetest Service Runner Usage:help
# Run a minetest instance from systemd
#
#	mt-run MINETEST_DIRECTORY [loop]
#
# Specify the "loop" option to use the built-in looping manager - do not use this with a daemonizer.
#
###/doc

#%include notest.sh bashout.sh colours.sh version.sh autohelp.sh

parse_args() {
	MT_DIR="$1"; shift

	MT_LOOP=false
	[[ "$1" = loop ]] && { MT_LOOP=true; shift; }

	# These are just defaults. Can be overridden by conf file
	MT_CONF="$MT_DIR/minetest.conf"
}

readconf() {
	readkv "$1" "$MT_CONF" "$2"
}

load_conf() {
	MT_BIN="$(readconf mt.bin bin/minetestserver)"
	MT_LOG="$(readconf mt.logs "logs/debug.txt")"

	MTL_GRACE="$(readconf mt.loop.grace 1)"
	MTL_FAILTIME="$(readconf mt.loop.failtime 15)"
	MTL_FAILPAUSE="$(readconf mt.loop.failpause 30)"

	MTR_ADMINEMAIL="$(readconf mt.emails "")"
	MTR_TAIL="$(readconfn mt.report.tail 50)"

	SERVERNAME="$(readconf server_name "$PWD")"
}

runmt() {
	local logdir="$MT_DIR/$(dirname "$MT_LOG")"
	[[ -d "$logdir" ]] || mkdir -p "$logdir"

	"MT_DIR/$MT_BIN" --logfile "$MT_DIR/$MT_LOG"
}

runloop() {
	while true; do

		# Run MT, and track time
		local d1=$(date "+%s")
		runmt
		local d2=$(date "+%s")
		local ds=$(date "+%F%T"|sed -r 's/[^0-9]+/-/g')
		
		local logdir="$MT_DIR/$(dirname "$MT_LOG")"
		local savelog="$logdir/minetest-${ds}.log"

		# Save the log instance
		mv "$MT_DIR/$MT_LOG" "$savelog"
		gzip "$savelog"
		savelog="$savelog.gz"

		infoe "========================= Log saved to $savelog"

		# Failed too soon
		if [[ "$(( $d2 - $d1 ))" -lt "$MTL_FAILTIME" ]]; then
			warne "RESTARTED TOO FAST - waiting $MTL_FAILPAUSE seconds"
			if [[ -n "$MTR_ADMINEMAIL" ]]; then
				# do not quote admin email - could be several addresses
				zcat "$savelog"|tail -n "$MTR_TAIL" | mail -s "Minetest server failure [$SERVERNAME]" $MTR_ADMINEMAIL
			fi
			sleep "$MTL_PAUSE" || faile "FAILED SLEEP - aborting" 

		# Failed after a while, or not a failure - we don't care at this point
		else
			infoe "Restaring in $MTL_GRACE second(s)"
			sleep "$MTL_GRACE" # grace period for proper interruption
		fi
	done
}

main() {
	parse_args "$@"

	load_conf "$MT_CONF"

	if [[ "$MT_LOOP" = true ]]; then
		runmt
	else
		runloop
	fi
}

notest main "$@"
